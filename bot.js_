var fs = require('fs');
var Discord = require('discord.io');
var logger = require('winston');
var auth = require('./auth.json');

// Configure logger settings
logger.remove(logger.transports.Console);
logger.add(new logger.transports.Console, {
    colorize: true
});
logger.level = 'debug';
// Initialize Discord Bot
var bot = new Discord.Client({
   token: auth.token,
   autorun: true
});

bot.commands = {};

var commandFiles = fs.readdirSync('./commands').filter(file => file.endsWith('.js'));

for (var file in commandFiles) {
    const command = require('./commands/' + commandFiles[file]);
    bot.commands[command.name] = command;
}

if(bot.commands.blackjack){
    bot.commands.blackjack.init(bot, logger);
}

var memory = {
    'AmateurWritersBot':
    {
        'krewlgate':
        {
            'timestamp': null,
            'users': {}
        },
        'writing':
        {
            'start': null,
            'cooldown': null,
            'count': 0
        }
    }
};


bot.on('ready', function (evt) {
    logger.info('Connected');
    logger.info('Logged in as: ');
    logger.info(bot.username + ' - (' + bot.id + ')');
});
bot.on('message', function (user, userID, channelID, message, evt) {
    var currentTime = +new Date();

    //testing server
    if(channelID=='563425660555493376' && user != 'AmateurWritersBot'){
         // Our bot needs to know if it will execute a command
        // It will listen for messages that will start with `!`
        if (message.substring(0, 1) == '~') {
            var args = message.substring(1).split(' ');
            var cmd = args[0];
           
            args = args.splice(1);
            switch(cmd) {
                case 'blackjack':
                bot.sendMessage({
                    to: channelID,
                    message: 'Going to play a game of blackjack!'
                });

                if( bot.commands && bot.commands.blackjack ){
                    bot.commands.blackjack.execute(message, args, user, channelID);
                }
                break;
             }
        }
    }
});